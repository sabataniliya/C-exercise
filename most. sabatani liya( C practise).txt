1.Hello world 
#include <stdio.h>

int main() {
  printf("Hello World!");
  return 0;
}
2.Use the do/while loop to print i as long as i is less than 6.
#include<stdio.h>
int main()
{
int i = 1;
do
 {
  printf("%d\n", i);
  i++;
  }
while (i < 6);
3.Add a name parameter of type char (string) to myFunction.
void myFunction(char name[])
{
  printf("Hello %s\n", name);
}

int main() {
  myFunction("Liam");
  myFunction("Jenny");
  myFunction("Anja");
  return 0;
}
4.Add the correct data type for the following variables:
#include<stdio.h>
int main() 
{
int myNum = 5;
float myFloatNum = 5.99;
char myLetter = 'D';
return 0;
}
5.Add the correct format specifier to print the value of the following variable:
#include<stdio.h>
int main()
{
char myLetter = 'D';
printf("%c", myLetter);
return 0;
}
6.Another way of creating strings: Fill in the missing part to create a "string" named greetings, and assign it the value "Hi".

char greetings[]= {'H', 'i', '\0'};
7.Change the value of the first element to 33:
int myNumbers[] = {25, 50, 75, 100};
myNumbers[0]=33;

8.Comments in C are written with special characters. Insert the missing parts:
//This is a single-line comment
/This is a multi-line comment/

9.Complete the switch statement, and add the correct keyword at the end to specify some code to run if there is no case match in the switch statement.

#include<stdio.h>
int main() 
{
int day = 4;
switch (
day
) {
  
case 1:
    printf("Saturday");
    
break;
  case2:
    printf("Sunday");
    break;
  default:
    printf("Weekend");
}
return 0;
}
10.Create a method named myFunction and call it inside main()
void 
myFunction() {
  printf("I just got executed!");
}

int main()
{
  myFunction();

  return 0;
}
11.Create a pointer variable called ptr, that points to the int variable myAge:
int myAge = 43;
int*ptr= &myAge;
12.Create an array of type int called myNumbers.
int myNumbers[]= {25, 50, 75, 100};
13.Display the sum of 5 + 10, using two variables: x and y.
#include<stdio.h>
int main()
{
int x=5;
int y=10;
printf("%d", x + y);
return 0;
}
14.Fill in the blanks to divide 10 by 5, and print the result.
#include<stdio.h>
int main()
{
int x = 10;
int y = 5;
printf("%d", x / y);
return 0;
}
15.Fill in the blanks to multiply 10 with 5, and print the result.
#include<stdio.h>
int main()
{
int x = 10;
int y = 5;
printf("%d", x * y);
return 0;
}
16.Fill in the missing part to create a "string" named greetings, and assign it the value "Hello".
char greetings[] = "Hello";
17.Fill in the missing part to create a Car structure:
struct
 Car {
  char brand[50];
  char model[50];
  int year;
}
18.Fill in the missing parts to assign the following values to the car1 variable: "BMW" to brand, "X5" to model and 1999 to year.
struct Car {
  char brand[50];
  char model[50];
  int year;
};

int main() {
  struct Car car1 = {"BMW", "X5", 1999};
  return 0;
}
19.Fill in the missing parts to create a struct variable of "Car" named "car1" inside main:
struct Car {
  char brand[50];
  char model[50];
  int year; 
  };

int main() {
  struct 
Car car1;
  return 0;
  }
20.Fill in the missing parts to create three variables of the same type, using a comma-separated list
#include<stdio.h>
int main()
{
int x=5,y=6,z = 50;
printf("%d", x + y + z);
return 0;
}
21.In the following loop, when the value is "4", jump directly to the next value.
for (int i = 0; i < 10; i++) {
  if (i == 4) {
    
continue;
  }
  printf("%d\n", i);
}
22.Insert the missing part to print the number 8 in main, by using a specific keyword inside myFunction:
int myFunction(int x)
{
  return 5 + x;
}
int main() {
  printf("%d", myFunction(3));
  return 0;
}
23.Insert the missing parts to call myFunction two times
void myFunction() {
  printf("I just got executed!");
}
int main() {
myFunction();
myFunction();
return 0;
} 
24.Insert the missing parts to complete the following switch statement.

#include<stdio.h>
int main()
int day = 2;
switch (
day
) {
  
case1:
printf("Monday");
    
break;
  case2:
    printf("Sunday");
    
break;
}
25.Loop through the elements in the array using a for loop.
int myNumbers[] = {25, 50, 75, 100};
int i;

for(i = 0; i < 4; i++) {
  printf("%d\n", myNumbers[i]);
}
26.Print "1" if x is equal to y, print "2" if x is greater than y, otherwise print "3".
#include<stdio.h>
int main()
{
int x = 50;
int y = 50;

if(x==y) {
  printf("1");
} 
else if(x>y)
{
  printf("2");
} 
else
 {
  printf("3");
}
return 0;
}
27.Print "Hello World" if x is equal to y.
#include<stdio.h>
int main()
{
int x = 50;
int y = 50;
if(x == y) 
{
  printf("Hello World");
}  
return 0;
}
28.Print "Hello World" if x is greater than y.
#include<stdio.h>
int main()
{
int x = 50;
int y = 10;
if(x > y) 
{
  printf("Hello World");
}  
return 0;
}
29.Print "Yes" if x is equal to y, otherwise print "No".
#include<stdio.h>
int main()
{
int x = 50;
int y = 50;
if (x==y) 
{
  printf("Yes");
} 
else
 {
  printf("No");
}
return 0;
}
30.Print i as long as i is less than 6.

#include<stdio.h>
int main()
{
int i = 1;
while
 (i < 6) {
  printf("%d\n", i);
  i++;
}
return 0;
}
31.Print the first character in the greetings string:
char greetings[] = "Hello World!";
printf("%c", greetings[0]);
32.Print the value of the second element in the myNumbers array
int myNumbers[] = {25, 50, 75, 100};
printf("%d",myNumbers[1]);

33.Stop the loop if i is 5
for (int i = 0; i < 10; i++) {
  if (i == 5) {
    break;
  }
  printf("%d\n", i);
}
34.Use a for loop to print "Yes" 5 times:
for(int i = 0; i<5;i++)
{
 printf("Yes\n");
}
35.Use the addition assignment operator to add the value 5 to the variable x.
#include<stdio.h>
int main()
{
int x = 10;
x +=5;
printf("%d",x=x+5);
return 0;
}
36.Use the correct format specifier to output the string
char greetings[] = "Hello World!";
printf("%s", greetings);
37.Use the correct format specifier to output the value of myNum:
#include<stdio.h>
int main()
{
int myNum = 15;
printf("%d", myNum);
return 0;
}
38.Use the correct operator to increase the value of the variable x by 1.
#include<stdio.h>
int main()
{
int x=10;
x++;
printf("%d",x++);
return 0;
}
39.Create a pointer variable called ptr, that points to the int variable myAge:

int myAge = 43;
int*ptr= &myAge;